/**
 * @generated
 */
module.exports = [
  {
    "path": "2020/09/10/updating-to-1.5.html",
    "content": "\nOverride names have been added (or changed) to all instances of `styled` and `withTheme`. This will require updating.\n\nHow are they named?\n\n- The namming convention is `package-name.File/ComponentName.StyledComponentName`.\n- For example, `H1` has been changed to `ui-kit.Typography.H1`.\n\nAction required\n\n1. Open the theme overrides\n2. Search for an identifiable part of each override name from theme overrides (ex: `H1`) in this search within github: (https://github.com/ApollosProject/apollos-apps/search?p=1&q=H1&type=Code&unscoped_q=H1)\n3. Easily see where changes were made and update names accordingly (ex: `ui-kit.Typography.H1`)\n",
    "title": "Updating from 1.4.3 to 1.5.0",
    "author": "Conrad VanLandingham",
    "id": "Updating from 1.4.3 to 1.5.0",
    "date": "2020-09-10T06:00:00.000Z",
    "seconds": 1599717600
  },
  {
    "path": "2020/08/18/release-1.5.html",
    "content": "\nToday, we’re announcing our next general release, Apollos 1.5. Apollos 1.5 is part 1 in a 2-part release journey focused on reliability and our investment in developer flexibility.\n\n<!--truncate-->\n\n## Upgrading your app\n\nTo start the upgrade process, run the following command within each of your Apollos app directors. For example, you’ll run this command both within your `ApollosChurchApp` react-native app, as well as within your `apollos-church-api` GraphQL service:\n\n`npx @apollosproject/upgrade-tools upgrade`\n\nMost likely, this command will generate merge conflicts or other notices that will require manual steps. To help with this process, read through the release notes below.\n\n## New override names across all ui- packages\n\nOverride names have been added (or changed) in core’s ui-packages. Now you can override the styles of any component styled using the `styled` HOC or the props of any component using the `withTheme` HOC. An example:\n\n```\nconst MyButtonOnCore = styled({\n   backgroundColor: 'green',\n}, 'MyButtonOnCore')(Button);\n```\n\nAnd then in an app's overrides, you could override that button's styles:\n\n```\nconst overrides = {\n  'MyButtonOnCore': {\n    backgroundColor: 'red',\n  }\n}\n```\n\nThe naming convention is: `package-name.File/ComponentName.StyledComponentName`\nand while this may seem cumbersome at times, consistency in the naming pattern is of utmost importance.\n\nWhen upgrading your app, make special note of any override name changes. For example, if you were previously overriding `UIText`, your override would no longer work. You will need to rename your override to `ui-kit.UIText`. For more information regarding upgrade instructions and suggested steps to take please refer to the [UPDATING.md](https://github.com/ApollosProject/apollos-apps/blob/master/UPDATING.md) file.s\n\n## Automatic auth refreshes to help circumvent logout issues\n\nFrom our ongoing analysis of the persistent logout issues in the app, we have identified that the majority of the users are logged out while still sending over what we consider a valid auth token. Rathering than allowing Rock to log out those users (for either an expired token, or reasons we don’t yet understand), we have opted to track user’s cookies when they login and allow users who are no longer authenticated via rock to stay logged in by validating their cookie against the details we now keep in Redis.\n\nIf you haven’t overridden any of your Auth datasource methods, this change is a drop in replacement, and you will notice no differences in app functionality (besides storing additional details in Redis)\n\nIf you have overridden either the `authenticate` or `getCurrentPerson` methods, you will need to update your overrides to include the new code. Use [the PR](https://github.com/ApollosProject/apollos-apps/pull/1517/files) as a reference for making changes, or copy and paste the methods from core and then reapply your custom code.\n\n## Only onboard once when using the same device\n\nThis feature uses local storage and user id to\n\n1. Check a user’s onboarding status before opening onboarding `checkOnboardingStatusAndNavigate`\n2. Set a value showing that a user has finished onboarding by calling `onboardingComplete({ userId: id })`\n\nIf a user has onboarded, they skip directly into the app. Functions to do this can be found in `onboardingStatus.js`.\n\nThis is a new added feature.\n\n## Analytics & tracking updates\n\nTwo important changes have been added in regards to analytics and bug tracking.\n\nFor analytics, we introduced a new core analytics library. This core analytics library collects limited metrics to be analyzed by the core product team. This library is opt-in if you are upgrading to the newest versions, and opt-out if you are creating a new app.\n\nOpting in to core navigation analytics is as simple as rendering the `<CoreNavigationAnalytics>` component, as visible in [the template](https://github.com/ApollosProject/apollos-templates/blob/master/apolloschurchapp/src/index.js#L74) and passing props into your AppContainer, which is responsible for injecting the analytics tracking.\n\nYou can audit the code of our core analytics [here](https://github.com/ApollosProject/apollos-apps/blob/master/packages/apollos-ui-analytics/src/CoreNavigationAnalytics.js)\n\nCurrently, we are only tracking navigation and app lifecycle events only. We are not tracking any user data whatsoever.\n\nAdditionally, we are releasing official Bugsnag support to core. Support is automatically added to the 1.5 template, and is enabled by providing Bugsnag env vars on api and client.\n\n## Rock device support\n\nUsers now can request a list of devices from the Rock DB that contain the notifications service push ID (One-Signal by default) and whether push notifications are enabled. This will be useful for enabling/disabling notifications client side and will be reflected in the DB. More metadata about devices can be easily added in future additions.\n\nSupport for this feature should be easy to pick up, nothing was changed, only added. If you want to overwrite any field resolver, you’ll need to import deviceSchema from the schema NPM package.\n\nYou can toggle the `enabled` field by passing the argument to the `updateNotificationsEnabled` mutation.\n\n## Improved image loading\n\nWe are releasing a significant refactor to the ConnectedImage component. This refactor introduces zero new API changes, but aims to significantly improve image load and re-mount times. You will lose out on animated image fade-ins when the image loads.\n\nFurthermore, we investigated misc image loading gotchas in relation to image loading. Most notably, it is recommended that you check the response headers that are returned from your image assets. ReactNative appears to be very strict on how caching is treated. We had one such app that no-cache headers were being sent with all image assets, and ReactNative refused to serve that image from cache ever - even if the same image was shown multiple times on a given render. Every re-render involved a server round trip. Drastically increasing network usage, load times, and creating a poor user experience.\n\n## Buttons in Action and Hero Lists\n\nActionListFeatures and HeroListFeatures are now capable of rendering a “Primary Action”, a button which can be wired up to perform any arbitrary action.\n\nThis feature can be enabled on supported features by adding additional configuration to your config.yml. As of right now, the configuration is brittle and explicit, but easy to maintain and understand.\n\nThe button seen in the Willow Events ActionList was added with the `following configuration block`:\n\n![events](/docs/assets/blog/release-1.5/events.png)\n\n```\n- title: Upcoming\n    ...\n  primaryAction:\n  action: OPEN_URL\n  title: 'See more'\n  relatedNode:\n    __typename: Url\n    url: 'WillowCreekApp://WillowCreekApp/app-link/EventFeed'\n```\n\naction can be any one of the `ACTION_FEATURE_ACTION`’s\nTitle is the title of the button.\n`relatedNode` has different behavior depending on the action.\n\nOn the client, the same logic that is used to handle an onPress for a `ActionListItem` or a CardListCard is used to handle the onPress for the primary action button.\n\n## Remote / digital campus support\n\nThe app will now more gracefully handle campuses with a type of “Online”. These campuses will show up in the app as either the last option in a list of locations, or the first option if the user is more than 100 miles from any other location.\n\nThis option is enabled by default, with no code changes needed. If you wish to customize the message that appears alongside the campus, you can add the following block to your config.yml\n\n![campuses](/docs/assets/blog/release-1.5/campus.png)\n\n```\nREMOTE_CAMPUS:\n  FIELDS:\n    street1: 'Test street'\n    city: 'Test city'\n    state: 'A state of being'\n```\n\nFind more details [in the PR](https://github.com/ApollosProject/apollos-apps/pull/1520/files)\n\n## Miscellaneous bug fixes and stability improvements\n\n[Complete changelog](https://github.com/ApollosProject/apollos-apps/blob/master/CHANGELOG.md)\n\n- Bumps codecov from 3.6.5 to 3.7.1 (#1514) (c6afec0e)\n- Bumps apollo-server-express from 2.11.0 to 2.15.1 (#1505) (b1b4aaad)\n- Bumps lodash from 4.17.13 to 4.17.19 (#1513) (1fdc1346)\n- Fixes an error from being thrown if a campus doesn't have an image (#1382) (7a6b0715)\n- Fixes Type safes followings return type (#1516) (fad044aa)\n- Fixes Chromecast for Android (#1496) (0a1d9a89)\n- Fixes two prayer issues (#1502) (dc1077c9)\n- Fixes issue when changing \"onPress\" prop on TouchableScale (#1498) (bded69a3)\n- Fixes issue where re-renders aren't picked up in StretchyView (#1499) (fb4b6cf1)\n- Enables isLive on Highlight and Default cards (#1519) (8ede83a2)\n- Removes ESLint Prop spreading rule (#1507) (786c0c2c)\n- Makes `react-native-safe-area-context` a peer dep (#1503) (e9f3085f)\n- Passes schema info to resolving methods (#1494) (c742b40d)\n- Adds eslint web config and bump deps (#1504) (ba3637a3)\n",
    "title": "Release Notes: v1.5",
    "author": "Conrad VanLandingham",
    "id": "Release Notes: v1.5",
    "date": "2020-08-18T06:00:00.000Z",
    "seconds": 1597730400
  }
];
